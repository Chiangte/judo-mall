package ${package}.controller;

import com.baomidou.mybatisplus.mapper.EntityWrapper;
import com.baomidou.mybatisplus.plugins.Page;
import ${package}.model.entity.${className};
import ${package}.service.${className}Service;
import com.github.judo.common.util.Query;
import com.github.judo.common.util.R;
import com.github.judo.common.web.BaseController;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.web.bind.annotation.*;

import java.util.Map;

/**
 * @Auther: ${author}
 * @Description: ${comments} 前端控制器
 * @Date ${datetime}
 * @Version: 1.0
 */
@RestController
@RequestMapping("${secondModuleName}")
@Api(tags = "${comments}")
public class ${className}Controller extends BaseController {

    @Autowired
    private ${className}Service ${classname}Service;

    /**
     * 通过ID查询${comments}
     *
     * @param id ID
     * @return ${comments}
     */
    @GetMapping("/{id}")
    @ApiOperation("通过ID查询${comments}")
    public ${className} ${classname}(@PathVariable Integer id) {
        return ${classname}Service.selectById(id);
    }

    /**
     * 分页查询${comments}
     *
     * @param params 分页对象
     * @return 分页对象
     */
    @GetMapping("/${classname}Page")
    @ApiOperation("分页查询${comments}")
    public Page ${classname}Page(@RequestParam Map<String, Object> params) {
        return ${classname}Service.selectPage(new Query<>(params), new EntityWrapper<>());
    }

    /**
     * 添加${comments}
     *
     * @param ${classname} ${comments}
     * @return success、false
     */
    @PostMapping
    @ApiOperation("添加${comments}")
    @CacheEvict(value = "dict_details", key = "#sysDict.type")
    public R<Boolean> ${classname}(@RequestBody ${className} ${classname}) {
        return new R<>(${classname}Service.insert(${classname}));
    }

    /**
     * 修改${comments}
     *
     * @param ${classname} ${comments}
     * @return success/false
     */
    @PutMapping
    @ApiOperation("修改${comments}")
    @CacheEvict(value = "dict_details", key = "#sysDict.type")
    public R<Boolean> edit${className}(@RequestBody ${className} ${classname}) {
        return new R<>(${classname}Service.updateById(${classname}));
    }

    /**
     * 删除${comments}，并且清除${comments}缓存
     *
     * @param id   ID
     * @param type 类型
     * @return R
     */
    @DeleteMapping("/{id}/{type}")
    @ApiOperation("删除${comments}，并且清除${comments}缓存")
    @CacheEvict(value = "dict_details", key = "#type")
    public R<Boolean> deleteDict(@PathVariable Integer id, @PathVariable String type) {
        return new R<>(${classname}Service.deleteById(id));
    }
}